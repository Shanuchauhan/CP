
string lps(string A,string B,int n)
{
    int dp[n+1][n+1];
    
    for(int i=0;i<=n;i++)
    {
        dp[i][0]=0;
    }
    for(int i=0;i<=n;i++)
    {
        dp[0][i]=0;
    }
    
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n;j++)
        {
            if(A[i-1]==B[j-1])
            {
                dp[i][j]=1+dp[i-1][j-1];
            }
            else{
                dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
    }
    
    int index=dp[n][n];
    
    int i=n,j=n;
    string result;
    while(i>0 && j>0)
    {
        if(A[i-1]==B[j-1])
        {
            result.push_back(A[i-1]);
            i--;j--;index--;
        }
        
        else if(dp[i-1][j]>dp[i][j-1])
        {
            i--;
        }
        else{
            j--;
        }
    }
    reverse(result.begin(),result.end());
    return result;
    
}

string Solution::longestPalindrome(string A) {
    
    int n=A.size();
    
    string B;
    B=A;
    reverse(B.begin(),B.end());
    
    string result=lps(A,B,n);
    return result;
}
