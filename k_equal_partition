class Solution {
public:
    bool canPartitionKSubsets(vector<int>& nums, int k) {
        int sum = 0;
        for(int i = 0; i<nums.size();i++)
        {
            sum+=nums[i];
        }
        vector<bool> visited(nums.size(),false);
        if(sum%k!=0) return false;
        int spa = sum/k; 
        return helper(0,nums,k,spa,visited,0);
    }
    bool helper(int j, vector<int>& nums, int k, int spa, vector<bool>& visited, int s)
    {
        if(k==1)
        {
            return true;
        }
        if(spa==s)
        {
            return helper(0,nums,k-1,spa,visited,0);
        }
        for(int i= j; i<nums.size();i++)
        {
            if(visited[i]==false && s+nums[i]<=spa)
            {
                visited[i]=true;
                if(helper(i+1, nums, k, spa, visited, s+nums[i]))
                    return true;
                visited[i]=false;
            }
        }
        return false;
    }
};