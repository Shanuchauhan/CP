#include<bits/stdc++.h>
using namespace std;

struct job{
    int start;
    int finish;
    int profit;
};

bool jobs_sort(job s1,job s2)
{
    return (s1.finish<s2.finish);
}

int latestNonConflict(Job jobs[], int index) 
{ 
    // Initialize 'lo' and 'hi' for Binary Search 
    int lo = 0, hi = index - 1; 
  
    // Perform binary Search iteratively 
    while (lo <= hi) 
    { 
        int mid = (lo + hi) / 2; 
        if (jobs[mid].finish <= jobs[index].start) 
        { 
            if (jobs[mid + 1].finish <= jobs[index].start) 
                lo = mid + 1; 
            else
                return mid; 
        } 
        else
            hi = mid - 1; 
    } 
  
    return -1; 
} 
int findMaxProfit(job arr,int n)
{
    sort(arr,arr+n,jobs_sort);
    // Create an array to store solutions of subproblems.  table[i] 
    // stores the profit for jobs till arr[i] (including arr[i]) 
    int table[n];
    table[0]=arr[0].profit;

    for(int i=1;i<n;i++)
    {
        int incProfit=arr[i].profit;
        int l=latestNonConflict(arr,i);
        if(l!=-1)
        {
            incProfit+=table[l];
        }
        table[i]=max(incProfit,table[i-1]);
    }

    int result = table[n-1];
    return result;
}

int main() 
{ 
    Job arr[] = {{3, 10, 20}, {1, 2, 50}, {6, 19, 100}, {2, 100, 200}}; 
    int n = sizeof(arr)/sizeof(arr[0]); 
    cout << "The optimal profit is " << findMaxProfit(arr, n); 
    return 0; 
} 